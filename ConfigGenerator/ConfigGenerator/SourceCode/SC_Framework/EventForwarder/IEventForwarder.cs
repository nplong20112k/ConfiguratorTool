namespace ConfigGenerator
{
    public enum EVENT_TYPE
    {
        EVENT_UNKNOW = 0,

        EVENT_UPDATE_GENERATE_TYPE,

        EVENT_REQUEST_PARSE_PARAMETER_FILE,
        EVENT_RESPONSE_PARSE_PARAMETER_FILE_DONE,

        EVENT_REQUEST_GENERATE_REPORT,
        EVENT_REQUEST_UPDATE_SYSTEM_INFO,
        EVENT_REQUEST_UPDATE_FINAL_INFO,

        EVENT_REQUEST_MERGE_INPUT_FILE,
        EVENT_RESPOND_MERGE_INPUT_FILE_DONE,

        EVENT_REQUEST_CHECK_INPUT_FILE,
        EVENT_RESPOND_CHECK_INPUT_FILE_DONE,

        EVENT_REQUEST_CHECK_TEMPLATE_FILE,
        EVENT_RESPOND_CHECK_TEMPLATE_FILE_DONE,
        
        EVENT_REQUEST_UPDATE_CONFIG_INFO,
        EVENT_RESPOND_UPDATE_CONFIG_INFO,
        EVENT_RESPOND_UPDATE_CONFIG_INFO_DONE,

        EVENT_REQUEST_GET_ONE_DATA_FROM_INPUT_FILE,
        EVENT_REQUEST_PARSE_INPUT_DATA,
        EVENT_REQUEST_INTEGRATE_PARSED_DATA,
        EVENT_REQUEST_WRITE_TO_REPORT_FILE,
        EVENT_RESPOND_WRITE_TO_REPORT_FILE_DONE,

        EVENT_REQUEST_FINALIZE_REPORT_FILE,
        EVENT_REQUEST_WRITE_LAST_PART_TO_REPORT_FILE,
        EVENT_RESPOND_WRITE_LAST_PART_TO_REPORT_FILE_DONE,
        EVENT_RESPOND_FINALIZE_REPORT_FILE_DONE,

        EVENT_RESPOND_ERROR_OCCURED,
    }

    interface IEventForwarder
    {
        //----------------------
        // Operations Interface
        //----------------------
        bool Register(IEventReceiver Receiver);
        bool Unregister(IEventReceiver Receiver);
        void Notify(EVENT_TYPE eventName, IShareObject oData);
    }
}
