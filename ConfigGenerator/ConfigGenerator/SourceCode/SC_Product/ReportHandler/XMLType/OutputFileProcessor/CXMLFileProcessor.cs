using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

namespace ConfigGenerator
{
    public class CXMLFileProcess : IXMLFileProcess
    {
        private enum XML_ATTRIBUTE_PROPERTIES
        {
            XML_ATTRIBURE_NAME_IDX = 0,
            XML_ATTRIBURE_VALUE_IDX,
            XML_ATTRIBUTE_MAX_LENGTH
        };

        private string       m_XMLCurrentFilePath       = null;
        private XmlDocument  m_XMLFileApp               = null;

        private bool         m_bIsFileLoaded            = false;
        private bool         m_bIsFileReady             = false;
        
        private const string FILE_HEADER =  "\n" +
                                            "  XML file auto generated by Config Generator tool\n" +
                                            "  Version {0} {1}\n" +
                                            "  Please do not change below this line manually\n";

        public CXMLFileProcess()
        {
            m_XMLFileApp = new XmlDocument();
        }
        
        public bool XMLLoadingFile(string sFilePath, bool bReadOnly = true)
        {
            bool bRet = false;
            ReInitProperties();

            if (File.Exists(sFilePath))
            {
                try
                {              
                    m_XMLFileApp.Load(sFilePath);
                    
                    m_XMLCurrentFilePath = sFilePath;
                    m_bIsFileLoaded = true;
                    if (bReadOnly == false)
                    {
                        m_bIsFileReady = true;
                    }
                    bRet = true;
                }
                catch { }
            }

            return bRet;
        }

        public bool XMLCreateFile(string sFilePath, XmlNode ReportContentNode)
        {
            bool bRet = false;
            if ((m_bIsFileLoaded == true) && (sFilePath != null) && (ReportContentNode != null))
            {
                // Check to create folder
                string sTempPath = Path.GetDirectoryName(sFilePath);
                if (!Directory.Exists(sTempPath))
                {
                    Directory.CreateDirectory(sTempPath);
                    Program.SetUnixFileFullPermissions(sTempPath);
                }

                // Remove file if it already exist
                if (File.Exists(sFilePath))
                {
                    File.Delete(sFilePath);
                }

                // Create new report file
                try
                {
                    string sVerRelease = CConfigTool.GetInstance().sVersionRelease;
                    string sDateRelease = CConfigTool.GetInstance().sDateRelease;
                    string sFileHeader = string.Format(FILE_HEADER,
                                                        sVerRelease,
                                                        sDateRelease);

                    XmlComment  FileHeaderNode  = m_XMLFileApp.CreateComment(sFileHeader);           
                    XmlNode     RootNode        = ReportContentNode.CloneNode(true);

                    m_XMLFileApp.InsertBefore(FileHeaderNode, m_XMLFileApp.SelectNodes("//comment()")[0]);                   
                    m_XMLFileApp.RemoveChild(m_XMLFileApp.DocumentElement);
                    m_XMLFileApp.AppendChild(RootNode);

                    // Fix for UTF-8 BOM signature... aladdin could not load with this sign marked.
                    Encoding utf8WithoutBom = new UTF8Encoding(false);
                    using (var XMLWriter = new StreamWriter(sFilePath, false, utf8WithoutBom))
                    {
                        m_XMLFileApp.Save(XMLWriter);
                    }
                    Program.SetUnixFileFullPermissions(sFilePath);
                    bRet = true;
                }
                catch { }
            }

            return bRet;
        }

        public XmlNode XMLGetRootNode()
        {
            XmlNode NodeRet = null;
            if (m_bIsFileLoaded)
            {
                NodeRet = m_XMLFileApp.DocumentElement;
            }

            return NodeRet;
        }
        
        public XmlNode XMLCreateNode(string NodeName, List<string[]> sAttribute = null)
        {
            XmlNode NodeRet = null;
            if (m_XMLFileApp != null)
            {
                NodeRet = m_XMLFileApp.CreateElement(NodeName);
                if ((NodeRet != null) && (sAttribute != null) && (sAttribute.Count > 0))
                {
                    foreach (string[] element in sAttribute)
                    {
                        if (element.Length == (int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBUTE_MAX_LENGTH)
                        {
                            (NodeRet as XmlElement).SetAttribute(element[(int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBURE_NAME_IDX], element[(int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBURE_VALUE_IDX]);
                        }
                    }
                }
            }

            return NodeRet;
        }

        public XmlNode XMLImportNode(XmlNode Node)
        {
            XmlNode RetNode = null;

            if ((Node != null) && (m_XMLFileApp != null))
            {
                RetNode = m_XMLFileApp.ImportNode(Node, true);
            }

            return RetNode;
        }
        
        public List<REF_NODE_TYPE> XMLSearchNodes(string NodeName, REF_NODE_TYPE ParentRefNode, List<string[]> sAttributes = null)
        {
            bool                bFlagFound      = true;
            List<REF_NODE_TYPE> ListRefNodeRet  = null;
            REF_NODE_TYPE       TempRefNode;

            if (m_bIsFileLoaded)
            {
                if (NodeName != null)
                {
                    ListRefNodeRet = new List<REF_NODE_TYPE>();

                    if ((ParentRefNode.RefPathNameList == null) && (ParentRefNode.Node == null))
                    {
                        if (NodeName == m_XMLFileApp.DocumentElement.Name)
                        {
                            if ((sAttributes != null) && (sAttributes.Count > 0))
                            {
                                bFlagFound = XMLVerifyNode(m_XMLFileApp.DocumentElement, sAttributes);
                            }

                            if (bFlagFound == true)
                            {
                                TempRefNode = new REF_NODE_TYPE()
                                {
                                    Node = m_XMLFileApp.DocumentElement,
                                    RefPathNameList = null
                                };
                                ListRefNodeRet.Add(TempRefNode);
                            }
                        }
                    }
                    else
                    {
                        if (XMLCheckNodeExist(ParentRefNode.Node) == true)
                        {
                            XmlNode ParentNode = ParentRefNode.Node;
                            if (ParentNode.HasChildNodes == true)
                            {
                                for (int i = 0; i < ParentNode.ChildNodes.Count; i++)
                                {
                                    if (NodeName == ParentNode.ChildNodes[i].Name)
                                    {
                                        if ((sAttributes != null) && (sAttributes.Count > 0))
                                        {
                                            bFlagFound = XMLVerifyNode(ParentNode.ChildNodes[i], sAttributes);
                                        }

                                        if (bFlagFound == true)
                                        {
                                            bFlagFound = false;
                                            TempRefNode = new REF_NODE_TYPE()
                                            {
                                                Node = ParentNode.ChildNodes[i],
                                                RefPathNameList = new List<string>()
                                            };

                                            TempRefNode.RefPathNameList.AddRange(ParentRefNode.RefPathNameList);
                                            TempRefNode.RefPathNameList.Add(ParentRefNode.Node.Name);
                                        
                                            ListRefNodeRet.Add(TempRefNode);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return ListRefNodeRet;
        }

        public bool XMLAddNode(XmlNode NodeIn, REF_NODE_TYPE ParentRefNode, bool bFlagAddFirst = false)
        {
            bool bRet = false;
            if (m_bIsFileLoaded)
            {
                if (NodeIn != null)
                {
                    if (XMLCheckNodeExist(ParentRefNode.Node))
                    {
                        try
                        {
                            if ((ParentRefNode.Node.HasChildNodes) && (bFlagAddFirst == true))
                            {
                                ParentRefNode.Node.InsertBefore(NodeIn, ParentRefNode.Node.FirstChild);
                            }
                            else
                            {
                                ParentRefNode.Node.AppendChild(NodeIn);
                            }
                            XMLFileSave();
                            bRet = true;
                        }
                        catch { }
                    }
                }
            }

            return bRet;
        }
        
        public bool XMLInsertNode(XmlNode NodeIn, REF_NODE_TYPE ParentRefNode, REF_NODE_TYPE SiblingNodePath, bool bFlagAfter = true)
        {
            bool bRet = false;
            if (m_bIsFileLoaded)
            {
                if (NodeIn != null)
                {
                    if ((XMLCheckNodeExist(ParentRefNode.Node) == true) &&
                        (XMLCheckNodeExist(SiblingNodePath.Node) == true))
                    {
                        try
                        {
                            if (bFlagAfter == true)
                            {
                                ParentRefNode.Node.InsertAfter(NodeIn, SiblingNodePath.Node);
                            }
                            else
                            {
                                ParentRefNode.Node.InsertBefore(NodeIn, SiblingNodePath.Node);
                            }
                            XMLFileSave();
                            bRet = true;
                        }
                        catch { }
                    }
                }
            }

            return bRet;
        }

        public bool XMLReplaceNode(XmlNode NewNode, XmlNode OldNode)
        {
            bool bRet = false;

            if (XMLCheckNodeExist(OldNode))
            {
                OldNode.ParentNode.ReplaceChild(NewNode, OldNode);
                XMLFileSave();
                bRet = true;
            }

            return bRet;
        }

        public bool XMLRemoveNode(XmlNode OldNode)
        {
            bool bRet = false;
            if (XMLCheckNodeExist(OldNode))
            {
                OldNode.ParentNode.RemoveChild(OldNode);
                XMLFileSave();
                bRet = true;
            }
            return bRet;
        }

        public bool XMLChangeAttributes(XmlNode TargetNode, List<string[]> sAttributes)
        {
            bool bRet = false;
            if (m_bIsFileLoaded)
            {
                if (TargetNode != null)
                {
                    if (XMLCheckNodeExist(TargetNode) == true)
                    {
                        foreach (string[] element in sAttributes)
                        {
                            if (element.Length == (int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBUTE_MAX_LENGTH)
                            {
                                (TargetNode as XmlElement).SetAttribute(element[(int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBURE_NAME_IDX], element[(int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBURE_VALUE_IDX]);
                            }
                        }
                        XMLFileSave();
                        bRet = true;
                    }
                }
            }

            return bRet;
        }

        private bool XMLFileSave()
        {
            bool bRet = false;
            if (m_bIsFileLoaded && m_bIsFileReady)
            {
                if(m_XMLCurrentFilePath != null)
                {
                    // Temp fix for UTF-8 BOM signature... aladdin could not load with this sign marked.
                    Encoding utf8WithoutBom = new UTF8Encoding(false);
                    using (var XMLWriter = new StreamWriter(m_XMLCurrentFilePath, false, utf8WithoutBom))
                    {
                        m_XMLFileApp.Save(XMLWriter);
                    }
                    bRet = true;
                }
            }
            return bRet;
        }

        private bool XMLCheckNodeExist(XmlNode RefNode)
        {
            bool bRet = false;
            XmlNode TempNode = null;
            XmlNode RootNode = null;

            if ((m_bIsFileLoaded == true) && (RefNode != null))
            {
                RootNode = m_XMLFileApp.DocumentElement;
                if (RefNode == RootNode)
                {
                    bRet = true;
                }
                else
                {
                    TempNode = RefNode;
                    while (TempNode.ParentNode != null)
                    {
                        if (TempNode.ParentNode == RootNode)
                        {
                            bRet = true;
                            break;
                        }
                        TempNode = TempNode.ParentNode;
                    }
                }
            }

            return bRet;
        }
        
        private bool XMLVerifyNode(XmlNode NodeRef, List<string[]> sAttributes)
        {
            bool bRet = false;

            if (NodeRef != null && sAttributes != null && sAttributes.Count > 0)
            {
                bRet = true;
                foreach (string[] element in sAttributes)
                {
                    // verify Attributes valid or invalid - Attribute just include Name and Value.
                    if (element.Length == (int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBUTE_MAX_LENGTH)
                    {
                        // get Attribute value of nodeRef than compare with value input.
                        if ((NodeRef as XmlElement).GetAttribute(element[(int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBURE_NAME_IDX]) != element[(int)XML_ATTRIBUTE_PROPERTIES.XML_ATTRIBURE_VALUE_IDX])
                        {
                            bRet = false;
                            break;
                        }
                    }
                }
            }

            return bRet;
        }

        private void ReInitProperties()
        {
            m_XMLCurrentFilePath = null;
            m_bIsFileLoaded      = false;
            m_bIsFileReady       = false;
        }
        
    }
}
